// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/protocol/timeouts.go

// Package protocol is a generated GoMock package.
package protocol

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTimeouts is a mock of Timeouts interface
type MockTimeouts struct {
	ctrl     *gomock.Controller
	recorder *MockTimeoutsMockRecorder
}

// MockTimeoutsMockRecorder is the mock recorder for MockTimeouts
type MockTimeoutsMockRecorder struct {
	mock *MockTimeouts
}

// NewMockTimeouts creates a new mock instance
func NewMockTimeouts(ctrl *gomock.Controller) *MockTimeouts {
	mock := &MockTimeouts{ctrl: ctrl}
	mock.recorder = &MockTimeoutsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeouts) EXPECT() *MockTimeoutsMockRecorder {
	return m.recorder
}

// GetTimeouts mocks base method
func (m *MockTimeouts) GetTimeouts(arg0 context.Context) (TimeoutInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeouts", arg0)
	ret0, _ := ret[0].(TimeoutInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeouts indicates an expected call of GetTimeouts
func (mr *MockTimeoutsMockRecorder) GetTimeouts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeouts", reflect.TypeOf((*MockTimeouts)(nil).GetTimeouts), arg0)
}

// SetTimeouts mocks base method
func (m *MockTimeouts) SetTimeouts(arg0 context.Context, arg1 Timeout, arg2 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeouts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeouts indicates an expected call of SetTimeouts
func (mr *MockTimeoutsMockRecorder) SetTimeouts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeouts", reflect.TypeOf((*MockTimeouts)(nil).SetTimeouts), arg0, arg1, arg2)
}

// SetImplicitTimeout mocks base method
func (m *MockTimeouts) SetImplicitTimeout(arg0 context.Context, arg1 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImplicitTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetImplicitTimeout indicates an expected call of SetImplicitTimeout
func (mr *MockTimeoutsMockRecorder) SetImplicitTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImplicitTimeout", reflect.TypeOf((*MockTimeouts)(nil).SetImplicitTimeout), arg0, arg1)
}

// SetPageLoadTimeout mocks base method
func (m *MockTimeouts) SetPageLoadTimeout(arg0 context.Context, arg1 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPageLoadTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPageLoadTimeout indicates an expected call of SetPageLoadTimeout
func (mr *MockTimeoutsMockRecorder) SetPageLoadTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPageLoadTimeout", reflect.TypeOf((*MockTimeouts)(nil).SetPageLoadTimeout), arg0, arg1)
}

// SetScriptTimeout mocks base method
func (m *MockTimeouts) SetScriptTimeout(arg0 context.Context, arg1 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScriptTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScriptTimeout indicates an expected call of SetScriptTimeout
func (mr *MockTimeoutsMockRecorder) SetScriptTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScriptTimeout", reflect.TypeOf((*MockTimeouts)(nil).SetScriptTimeout), arg0, arg1)
}
