// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/protocol/navigation.go

// Package protocol is a generated GoMock package.
package protocol

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNavigation is a mock of Navigation interface
type MockNavigation struct {
	ctrl     *gomock.Controller
	recorder *MockNavigationMockRecorder
}

// MockNavigationMockRecorder is the mock recorder for MockNavigation
type MockNavigationMockRecorder struct {
	mock *MockNavigation
}

// NewMockNavigation creates a new mock instance
func NewMockNavigation(ctrl *gomock.Controller) *MockNavigation {
	mock := &MockNavigation{ctrl: ctrl}
	mock.recorder = &MockNavigationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNavigation) EXPECT() *MockNavigationMockRecorder {
	return m.recorder
}

// NavigateTo mocks base method
func (m *MockNavigation) NavigateTo(ctx context.Context, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NavigateTo", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// NavigateTo indicates an expected call of NavigateTo
func (mr *MockNavigationMockRecorder) NavigateTo(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NavigateTo", reflect.TypeOf((*MockNavigation)(nil).NavigateTo), ctx, url)
}

// GetCurrentURL mocks base method
func (m *MockNavigation) GetCurrentURL(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentURL", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentURL indicates an expected call of GetCurrentURL
func (mr *MockNavigationMockRecorder) GetCurrentURL(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentURL", reflect.TypeOf((*MockNavigation)(nil).GetCurrentURL), ctx)
}

// Back mocks base method
func (m *MockNavigation) Back(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Back", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Back indicates an expected call of Back
func (mr *MockNavigationMockRecorder) Back(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Back", reflect.TypeOf((*MockNavigation)(nil).Back), ctx)
}

// Forward mocks base method
func (m *MockNavigation) Forward(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Forward indicates an expected call of Forward
func (mr *MockNavigationMockRecorder) Forward(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockNavigation)(nil).Forward), ctx)
}

// Refresh mocks base method
func (m *MockNavigation) Refresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockNavigationMockRecorder) Refresh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockNavigation)(nil).Refresh), ctx)
}

// GetTitle mocks base method
func (m *MockNavigation) GetTitle(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTitle indicates an expected call of GetTitle
func (mr *MockNavigationMockRecorder) GetTitle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockNavigation)(nil).GetTitle), ctx)
}
