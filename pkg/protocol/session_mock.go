// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/protocol/session.go

// Package protocol is a generated GoMock package.
package protocol

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockSession) ID() SessionID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(SessionID)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSession)(nil).ID))
}

// Capabilities mocks base method
func (m *MockSession) Capabilities() Capabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(Capabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities
func (mr *MockSessionMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockSession)(nil).Capabilities))
}

// GetTimeouts mocks base method
func (m *MockSession) GetTimeouts(arg0 context.Context) (TimeoutInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeouts", arg0)
	ret0, _ := ret[0].(TimeoutInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeouts indicates an expected call of GetTimeouts
func (mr *MockSessionMockRecorder) GetTimeouts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeouts", reflect.TypeOf((*MockSession)(nil).GetTimeouts), arg0)
}

// SetTimeouts mocks base method
func (m *MockSession) SetTimeouts(arg0 context.Context, arg1 Timeout, arg2 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeouts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimeouts indicates an expected call of SetTimeouts
func (mr *MockSessionMockRecorder) SetTimeouts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeouts", reflect.TypeOf((*MockSession)(nil).SetTimeouts), arg0, arg1, arg2)
}

// Status mocks base method
func (m *MockSession) Status(arg0 context.Context) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockSessionMockRecorder) Status(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSession)(nil).Status), arg0)
}

// Delete mocks base method
func (m *MockSession) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSessionMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSession)(nil).Delete), arg0)
}

// SetImplicitTimeout mocks base method
func (m *MockSession) SetImplicitTimeout(arg0 context.Context, arg1 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImplicitTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetImplicitTimeout indicates an expected call of SetImplicitTimeout
func (mr *MockSessionMockRecorder) SetImplicitTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImplicitTimeout", reflect.TypeOf((*MockSession)(nil).SetImplicitTimeout), arg0, arg1)
}

// SetPageLoadTimeout mocks base method
func (m *MockSession) SetPageLoadTimeout(arg0 context.Context, arg1 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPageLoadTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPageLoadTimeout indicates an expected call of SetPageLoadTimeout
func (mr *MockSessionMockRecorder) SetPageLoadTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPageLoadTimeout", reflect.TypeOf((*MockSession)(nil).SetPageLoadTimeout), arg0, arg1)
}

// SetScriptTimeout mocks base method
func (m *MockSession) SetScriptTimeout(arg0 context.Context, arg1 Ms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScriptTimeout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScriptTimeout indicates an expected call of SetScriptTimeout
func (mr *MockSessionMockRecorder) SetScriptTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScriptTimeout", reflect.TypeOf((*MockSession)(nil).SetScriptTimeout), arg0, arg1)
}
